Parameters:
  WebAppTag:
    Type: String
    Default: latest

  WebAppRepository:
    Type: String

  DesiredCount:
    Type: Number
    Default: 0

  TargetGroup:
    Type: String

  Cluster:
    Type: String

  Memory:
    Type: Number
    Default: 128

  Cpu:
    Type: Number
    Default: 128

  ECSTaskRole:
    Type: String

Resources:
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ECSServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: webapp
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-dotnetapp
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: webapp
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${WebAppRepository}:${WebAppTag}
          Essential: true
          Memory: 512
          Cpu: 2
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudwatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref Cluster
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: Tag
              Value: !Ref WebAppTag
